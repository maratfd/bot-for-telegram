import os
import logging
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
#load_dotenv()
#BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 521188043

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token='7125055805:AAGm9c3MUZGsVXLV5Dgmxt914hTJ47bz1Lg')
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ProductState(StatesGroup):
    name = State()
    description = State()
    price = State()
    photo = State()

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========
@router.message(Command("start"))
async def start_handler(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data="show_catalog"),
        InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")
    )
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ==========
@router.callback_query(F("show_catalog"))
async def show_catalog(callback: types.CallbackQuery):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–î
    products = [
        {"id": 1, "name": "–¢–æ–≤–∞—Ä 1", "price": 1000},
        {"id": 2, "name": "–¢–æ–≤–∞—Ä 2", "price": 2000}
    ]
    
    builder = InlineKeyboardBuilder()
    for product in products:
        builder.button(
            text=f"{product['name']} - {product['price']}‚ÇΩ",
            callback_data=f"product_{product['id']}"
        )
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F(startswith="product_"))
async def show_product(callback: types.CallbackQuery):
    product_id = callback.data.split("_")[1]
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ë–î
    product = {
        "name": f"–¢–æ–≤–∞—Ä {product_id}",
        "description": "–û—Ç–ª–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä!",
        "price": 1000,
        "photo": None  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å file_id —Ñ–æ—Ç–æ
    }
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{product_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="show_catalog")
    builder.adjust(1)
    
    if product['photo']:
        await callback.message.delete()
        await callback.message.answer_photo(
            photo=product['photo'],
            caption=f"<b>{product['name']}</b>\n\n{product['description']}\n\nüí∞ –¶–µ–Ω–∞: <b>{product['price']}‚ÇΩ</b>",
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.edit_text(
            f"<b>{product['name']}</b>\n\n{product['description']}\n\nüí∞ –¶–µ–Ω–∞: <b>{product['price']}‚ÇΩ</b>",
            reply_markup=builder.as_markup()
        )
    await callback.answer()

# ========== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ==========
@router.message(Command("add_product"), lambda message: message.from_user.id == ADMIN_ID)
async def add_product_start(message: types.Message, state: FSMContext):
    await state.set_state(ProductState.name)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@router.message(ProductState.name)
async def set_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(ProductState.description)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
async def main():
    logger.info("Starting bot...")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
