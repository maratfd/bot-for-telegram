
import logging
import aiohttp
import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from typing import Dict, Any

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ====== #
BOT_TOKEN = ''
CHAD_API_KEY = ''
CHAD_API_URL = 'https://ask.chadgpt.ru/api/public/gpt-4o-mini'
DB_NAME = "bot_history.db"
REQUEST_TIMEOUT = 25  # –°–µ–∫—É–Ω–¥

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ====== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê –ò –î–ò–°–ü–ï–¢–ß–ï–†–ê ====== #
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ====== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====== #
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            model TEXT NOT NULL,
            temperature REAL NOT NULL,
            prompt TEXT NOT NULL,
            response TEXT NOT NULL
        )
        """)
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_settings (
            user_id INTEGER PRIMARY KEY,
            model TEXT NOT NULL DEFAULT 'chadai',
            temperature REAL NOT NULL DEFAULT 0.7
        )
        """)
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_history_user_id ON history (user_id)")
        conn.commit()

def get_user_settings(user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT model, temperature FROM user_settings WHERE user_id = ?", (user_id,))
        settings = cursor.fetchone()
        
        if settings:
            return {"model": settings[0], "temperature": settings[1]}
        
        default_settings = {"model": "chadai", "temperature": 0.7}
        cursor.execute(
            "INSERT INTO user_settings (user_id, model, temperature) VALUES (?, ?, ?)",
            (user_id, default_settings["model"], default_settings["temperature"])
        )
        conn.commit()
        return default_settings

def update_user_setting(user_id: int, key: str, value: Any):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute(
            f"UPDATE user_settings SET {key} = ? WHERE user_id = ?",
            (value, user_id)
        )
        conn.commit()

def add_to_history(user_id: int, model: str, temperature: float, prompt: str, response: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("""
        INSERT INTO history (user_id, model, temperature, prompt, response)
        VALUES (?, ?, ?, ?, ?)
        """, (user_id, model, temperature, prompt, response))
        conn.commit()

def get_user_history(user_id: int, limit: int = 5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("""
        SELECT timestamp, model, temperature, prompt, response 
        FROM history 
        WHERE user_id = ? 
        ORDER BY timestamp DESC 
        LIMIT ?
        """, (user_id, limit))
        return cursor.fetchall()

def clear_user_history(user_id: int):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM history WHERE user_id = ?", (user_id,))
        conn.commit()
        return cursor.rowcount

# ====== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====== #
def get_main_keyboard(user_id: int):
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    settings = get_user_settings(user_id)
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="ChadAI" if settings["model"] != "chadai" else "‚úÖ ChadAI")],
            [
                KeyboardButton(text=f"üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: {settings['temperature']}"),
                KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è")
            ],
            [KeyboardButton(text="üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True
    )

def get_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÜÔ∏è –£–≤–µ–ª–∏—á–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="increase_temp"),
                InlineKeyboardButton(text="‚¨áÔ∏è –£–º–µ–Ω—å—à–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="decrease_temp")
            ],
            [
                InlineKeyboardButton(text="üîß –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="reset_settings"),
                InlineKeyboardButton(text="üìú –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")
            ]
        ]
    )

# ====== CHADGPT API ====== #
class ChadGPTAPI:
    def __init__(self):
        self.session = None
    
    async def ensure_session(self):
        if self.session is None or self.session.closed:
            self.session = aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=REQUEST_TIMEOUT))
    
    async def close(self):
        if self.session:
            await self.session.close()
    
    async def generate_response(self, prompt: str, temperature: float) -> str:
        try:
            await self.ensure_session()
            
            request_json = {
                "message": prompt,
                "api_key": CHAD_API_KEY
            }

            async with self.session.post(
                CHAD_API_URL,
                json=request_json
            ) as response:
                
                if response.status != 200:
                    logger.error(f"HTTP Error {response.status}")
                    return None
                
                data = await response.json()
                
                if data.get('is_success', False):
                    return data['response']
                else:
                    logger.error(f"API Error: {data.get('error_message', 'Unknown error')}")
                    return None
                    
        except Exception as e:
            logger.error(f"ChadGPT API Error: {str(e)}")
            return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
chad_api = ChadGPTAPI()

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====== #
@dp.message(Command("start"))
async def cmd_start(message: Message):
    settings = get_user_settings(message.from_user.id)
    await message.answer(
        "‚ú® <b>–ß–∞—Ç-–±–æ—Ç —Å ChadGPT</b> –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ –ú–æ–¥–µ–ª—å: <b>{settings['model'].upper()}</b>\n"
        f"‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{settings['temperature']}</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.",
        reply_markup=get_main_keyboard(message.from_user.id)
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ChadGPT API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
    )

@dp.message(Command("status"))
async def cmd_status(message: Message):
    await message.answer(
        "üü¢ <b>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ</b>\n\n"
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(get_all_users())}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {get_total_requests()}"
    )

@dp.message(F.text == "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: Message):
    settings = get_user_settings(message.from_user.id)
    await message.answer(
        f"‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        f"‚Ä¢ –ú–æ–¥–µ–ª—å: <b>{settings['model'].upper()}</b>\n"
        f"‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{settings['temperature']}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_settings_keyboard()
    )

@dp.callback_query(F.data == "increase_temp")
async def increase_temperature(callback: CallbackQuery):
    user_id = callback.from_user.id
    settings = get_user_settings(user_id)
    new_temp = min(1.0, round(settings["temperature"] + 0.1, 1))
    update_user_setting(user_id, "temperature", new_temp)
    await callback.message.edit_text(
        f"‚öôÔ∏è <b>–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ:</b> {new_temp}",
        reply_markup=get_settings_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "decrease_temp")
async def decrease_temperature(callback: CallbackQuery):
    user_id = callback.from_user.id
    settings = get_user_settings(user_id)
    new_temp = max(0.0, round(settings["temperature"] - 0.1, 1))
    update_user_setting(user_id, "temperature", new_temp)
    await callback.message.edit_text(
        f"‚öôÔ∏è <b>–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞ –¥–æ:</b> {new_temp}",
        reply_markup=get_settings_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "reset_settings")
async def reset_settings(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_setting(user_id, "model", "chadai")
    update_user_setting(user_id, "temperature", 0.7)
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>\n"
        "‚Ä¢ –ú–æ–¥–µ–ª—å: CHADAI\n"
        "‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: 0.7",
        reply_markup=get_settings_keyboard()
    )
    await callback.answer()

@dp.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def show_history(message: Message):
    history = get_user_history(message.from_user.id)
    if not history:
        await message.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞")
        return
    
    text = "üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n\n"
    for i, (timestamp, model, temp, prompt, response) in enumerate(history, 1):
        text += (
            f"{i}. <i>{timestamp}</i>\n"
            f"‚Ä¢ –ú–æ–¥–µ–ª—å: <b>{model.upper()}</b>\n"
            f"‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{temp}</b>\n"
            f"‚Ä¢ –ó–∞–ø—Ä–æ—Å: <i>{prompt[:50]}{'...' if len(prompt) > 50 else ''}</i>\n\n"
        )
    
    await message.answer(text)

@dp.callback_query(F.data == "clear_history")
async def clear_history_handler(callback: CallbackQuery):
    deleted_count = clear_user_history(callback.from_user.id)
    await callback.message.answer(
        f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏" if deleted_count > 0 
        else "üì≠ –ò—Å—Ç–æ—Ä–∏—è —É–∂–µ –ø—É—Å—Ç–∞"
    )
    await callback.answer()

@dp.message(F.text)
async def handle_text(message: Message):
    if message.text in ["ChadAI", "üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å:", "üìú –ò—Å—Ç–æ—Ä–∏—è", "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]:
        return
    
    user_id = message.from_user.id
    processing_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
    
    try:
        settings = get_user_settings(user_id)
        response = await chad_api.generate_response(message.text, settings["temperature"])
        
        if response:
            add_to_history(
                user_id=user_id,
                model=settings["model"],
                temperature=settings["temperature"],
                prompt=message.text,
                response=response
            )
            #used_words = response_data.get('used_words_count', 'N/A')
            await processing_msg.edit_text(
                f"üìù <b>–†–µ–∑—É–ª—å—Ç–∞—Ç (–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å {settings['temperature']}):</b>\n\n{response}"
                #f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–ª–æ–≤: {used_words}"
            )
        else:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "1. –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n"
                "2. –£–º–µ–Ω—å—à–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
                "3. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ"
            )
            
    except Exception as e:
        logger.error(f"Error handling message: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")

# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====== #
def get_all_users():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT DISTINCT user_id FROM user_settings")
        return cursor.fetchall()

def get_total_requests():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM history")
        return cursor.fetchone()[0]

# ====== –ó–ê–ü–£–°–ö –ò –ó–ê–í–ï–†–®–ï–ù–ò–ï ====== #
async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    init_db()
    logger.info("Database initialized")
    logger.info("Starting bot...")

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    await chad_api.close()
    logger.info("Bot shutdown complete")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await on_startup()
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())
