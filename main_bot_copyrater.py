import logging
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)
from aiogram.enums import ParseMode
from datetime import datetime
import sqlite3
import requests
from typing import Dict, Any
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from aiogram.client.default import DefaultBotProperties

DEEPSEEK_URL = "https://www.deepseek.com/chat"

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ====== #
#BOT_TOKEN = ''
DEEPSEEK_API_KEY = "your_deepseek_api_key"
OPENAI_API_KEY = ''
DB_NAME = "bot_history.db"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    #token='',
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
USER_SETTINGS: Dict[int, Dict[str, Any]] = {}  # {user_id: {"model": str, "temperature": float}}

# ====== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====== #
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            model TEXT NOT NULL,
            temperature REAL NOT NULL,
            prompt TEXT NOT NULL,
            response TEXT NOT NULL
        )
        """)
        # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS user_settings (
            user_id INTEGER PRIMARY KEY,
            model TEXT NOT NULL DEFAULT 'deepseek',
            temperature REAL NOT NULL DEFAULT 0.7
        )
        """)
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_history_user_id ON history (user_id)")
        conn.commit()

def get_user_settings(user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT model, temperature FROM user_settings WHERE user_id = ?", (user_id,))
        settings = cursor.fetchone()
        
        if settings:
            return {"model": settings[0], "temperature": settings[1]}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_settings = {"model": "deepseek", "temperature": 0.7}
        cursor.execute(
            "INSERT INTO user_settings (user_id, model, temperature) VALUES (?, ?, ?)",
            (user_id, default_settings["model"], default_settings["temperature"])
        )
        conn.commit()
        return default_settings

def update_user_setting(user_id: int, key: str, value: Any):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute(
            f"UPDATE user_settings SET {key} = ? WHERE user_id = ?",
            (value, user_id)
        )
        conn.commit()

def add_to_history(user_id: int, model: str, temperature: float, prompt: str, response: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("""
        INSERT INTO history (user_id, model, temperature, prompt, response)
        VALUES (?, ?, ?, ?, ?)
        """, (user_id, model, temperature, prompt, response))
        conn.commit()

def get_user_history(user_id: int, limit: int = 5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("""
        SELECT timestamp, model, temperature, prompt, response 
        FROM history 
        WHERE user_id = ? 
        ORDER BY timestamp DESC 
        LIMIT ?
        """, (user_id, limit))
        return cursor.fetchall()

def clear_user_history(user_id: int):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM history WHERE user_id = ?", (user_id,))
        conn.commit()
        return cursor.rowcount

# ====== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====== #
def get_main_keyboard(user_id: int):
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    settings = get_user_settings(user_id)
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="DeepSeek" if settings["model"] != "deepseek" else "‚úÖ DeepSeek"),
                KeyboardButton(text="OpenAI GPT" if settings["model"] != "openai" else "‚úÖ OpenAI GPT")
            ],
            [
                KeyboardButton(text=f"üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: {settings['temperature']}"),
                KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è")
            ],
            [KeyboardButton(text="üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True
    )

def get_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÜÔ∏è –£–≤–µ–ª–∏—á–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="increase_temp"),
                InlineKeyboardButton(text="‚¨áÔ∏è –£–º–µ–Ω—å—à–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="decrease_temp")
            ],
            [
                InlineKeyboardButton(text="üîß –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="reset_settings"),
                InlineKeyboardButton(text="üìú –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")
            ]
        ]
    )

# ====== –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–ö–°–¢–ê ====== #
async def generate_text(user_id: int, prompt: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å —É—á—ë—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    settings = get_user_settings(user_id)
    
    if settings["model"] == "deepseek":
        return await generate_with_api(
            url=DEEPSEEK_URL,
            api_key=DEEPSEEK_API_KEY,
            model="deepseek-chat",
            prompt=prompt,
            temperature=settings["temperature"]
        )
    else:
        return await generate_with_api(
            url="https://api.openai.com/v1/chat/completions",
            api_key=OPENAI_API_KEY,
            model="gpt-3.5-turbo",
            prompt=prompt,
            temperature=settings["temperature"]
        )

async def generate_with_api(url: str, api_key: str, model: str, prompt: str, temperature: float) -> str:
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API"""
    try:
        response = requests.post(
            url,
            headers={"Authorization": f"Bearer {api_key}"},
            json={
                "model": model,
                "messages": [{"role": "user", "content": prompt}],
                "temperature": temperature
            },
            timeout=30
        )
        response.raise_for_status()
        return response.json()["choices"][0]["message"]["content"]
    except Exception as e:
        logger.error(f"API Error ({model}): {e}")
        return None

# ====== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====== #
@dp.message(Command("start"))
async def cmd_start(message: Message):
    settings = get_user_settings(message.from_user.id)
    await message.answer(
        f"‚ú® <b>AI-–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä</b> –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ –ú–æ–¥–µ–ª—å: <b>{settings['model'].upper()}</b>\n"
        f"‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{settings['temperature']}</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å.",
        reply_markup=get_main_keyboard(message.from_user.id)
    )

@dp.message(F.text == "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: Message):
    settings = get_user_settings(message.from_user.id)
    await message.answer(
        f"‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        f"‚Ä¢ –ú–æ–¥–µ–ª—å: <b>{settings['model'].upper()}</b>\n"
        f"‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{settings['temperature']}</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_settings_keyboard()
    )

@dp.message(F.text.startswith("üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å:"))
async def show_creativity_info(message: Message):
    settings = get_user_settings(message.from_user.id)
    await message.answer(
        f"üé® <b>–£—Ä–æ–≤–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏:</b> {settings['temperature']}\n\n"
        "0.0 - —Å—Ç—Ä–æ–≥–∏–π –∏ —Ç–æ—á–Ω—ã–π\n"
        "0.5 - –±–∞–ª–∞–Ω—Å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏\n"
        "1.0 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π\n\n"
        "–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (/settings)"
    )

@dp.callback_query(F.data == "increase_temp")
async def increase_temperature(callback: CallbackQuery):
    user_id = callback.from_user.id
    settings = get_user_settings(user_id)
    new_temp = min(1.0, round(settings["temperature"] + 0.1, 1))
    update_user_setting(user_id, "temperature", new_temp)
    await callback.message.edit_text(
        f"‚öôÔ∏è <b>–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ:</b> {new_temp}",
        reply_markup=get_settings_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "decrease_temp")
async def decrease_temperature(callback: CallbackQuery):
    user_id = callback.from_user.id
    settings = get_user_settings(user_id)
    new_temp = max(0.0, round(settings["temperature"] - 0.1, 1))
    update_user_setting(user_id, "temperature", new_temp)
    await callback.message.edit_text(
        f"‚öôÔ∏è <b>–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —É–º–µ–Ω—å—à–µ–Ω–∞ –¥–æ:</b> {new_temp}",
        reply_markup=get_settings_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "reset_settings")
async def reset_settings(callback: CallbackQuery):
    user_id = callback.from_user.id
    update_user_setting(user_id, "model", "deepseek")
    update_user_setting(user_id, "temperature", 0.7)
    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:</b>\n"
        "‚Ä¢ –ú–æ–¥–µ–ª—å: DEEPSEEK\n"
        "‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: 0.7",
        reply_markup=get_settings_keyboard()
    )
    await callback.answer()

@dp.message(F.text.in_(["DeepSeek", "OpenAI GPT"]))
async def change_model(message: Message):
    user_id = message.from_user.id
    new_model = "deepseek" if message.text == "DeepSeek" else "openai"
    update_user_setting(user_id, "model", new_model)
    await message.answer(
        f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{new_model.upper()}</b>",
        reply_markup=get_main_keyboard(user_id)
    )

@dp.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def show_history(message: Message):
    history = get_user_history(message.from_user.id)
    if not history:
        await message.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞")
        return
    
    text = "üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n\n"
    for i, (timestamp, model, temp, prompt, _) in enumerate(history, 1):
        text += (
            f"{i}. <i>{timestamp}</i>\n"
            f"‚Ä¢ –ú–æ–¥–µ–ª—å: <b>{model.upper()}</b>\n"
            f"‚Ä¢ –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{temp}</b>\n"
            f"‚Ä¢ –ó–∞–ø—Ä–æ—Å: <i>{prompt[:50]}{'...' if len(prompt) > 50 else ''}</i>\n\n"
        )
    
    await message.answer(text)

@dp.callback_query(F.data == "clear_history")
async def clear_history_handler(callback: CallbackQuery):
    deleted_count = clear_user_history(callback.from_user.id)
    await callback.message.answer(
        f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏" if deleted_count > 0 
        else "üì≠ –ò—Å—Ç–æ—Ä–∏—è —É–∂–µ –ø—É—Å—Ç–∞"
    )
    await callback.answer()

@dp.message(F.text)
async def handle_text(message: Message):
    if message.text in ["DeepSeek", "OpenAI GPT", "üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å:", "üìú –ò—Å—Ç–æ—Ä–∏—è", "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]:
        return
    
    user_id = message.from_user.id
    await message.answer("üîÑ <i>–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç...</i>")
    
    generated_text = await generate_text(user_id, message.text)
    if not generated_text:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    settings = get_user_settings(user_id)
    add_to_history(
        user_id=user_id,
        model=settings["model"],
        temperature=settings["temperature"],
        prompt=message.text,
        response=generated_text
    )
    
    await message.answer(
        f"üìù <b>–†–µ–∑—É–ª—å—Ç–∞—Ç ({settings['model'].upper()}, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å {settings['temperature']}):</b>\n\n"
        f"{generated_text}",
        reply_markup=get_main_keyboard(user_id)
    )

# ====== –ó–ê–ü–£–°–ö ====== #
if __name__ == "__main__":
    init_db()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    dp.run_polling(bot)
