import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton
import logging

from database import Database

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
db = Database("database.db")

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ProductState(StatesGroup):
    name = State()
    description = State()
    price = State()
    photo = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    if not db.user_exists(user_id):
        db.add_user(user_id)
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"))
    keyboard.add(InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart"))
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥
@dp.callback_query_handler(lambda c: c.data == 'catalog')
async def show_catalog(callback: types.CallbackQuery):
    products = db.get_products()
    keyboard = InlineKeyboardMarkup()
    
    for product in products:
        keyboard.add(
            InlineKeyboardButton(
                f"{product[1]} - {product[3]}‚ÇΩ",
                callback_data=f"product_{product[0]}"
            )
        )
    
    await bot.send_message(
        callback.from_user.id,
        "üì¶ **–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤**:",
        reply_markup=keyboard
    )

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä
@dp.callback_query_handler(lambda c: c.data.startswith('product_'))
async def show_product(callback: types.CallbackQuery):
    product_id = int(callback.data.split('_')[1])
    product = db.get_product(product_id)
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_id}"))
    
    await bot.send_photo(
        callback.from_user.id,
        photo=product[4],  # –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
        caption=f"**{product[1]}**\n\n{product[2]}\n\nüí∞ –¶–µ–Ω–∞: **{product[3]}‚ÇΩ**",
        reply_markup=keyboard
    )

# –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query_handler(lambda c: c.data.startswith('add_to_cart_'))
async def add_to_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    product_id = int(callback.data.split('_')[3])
    db.add_to_cart(user_id, product_id)
    await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

# –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query_handler(lambda c: c.data == 'cart')
async def show_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cart_items = db.get_cart(user_id)
    total = sum(item[3] for item in cart_items)  # –°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"))
    
    items_text = "\n".join([f"‚û°Ô∏è {item[1]} - {item[3]}‚ÇΩ" for item in cart_items])
    await bot.send_message(
        callback.from_user.id,
        f"üõí **–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞**:\n\n{items_text}\n\nüí∏ **–ò—Ç–æ–≥–æ: {total}‚ÇΩ**",
        reply_markup=keyboard
    )

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (—á–µ—Ä–µ–∑ Telegram Payments)
@dp.callback_query_handler(lambda c: c.data == 'checkout')
async def checkout(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cart_items = db.get_cart(user_id)
    total = sum(item[3] for item in cart_items) * 100  # –í –∫–æ–ø–µ–π–∫–∞—Ö
    
    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title="–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
        description="–û–ø–ª–∞—Ç–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑",
        payload="order_payload",
        provider_token=PROVIDER_TOKEN,
        currency="RUB",
        prices=[LabeledPrice(label="–û–±—â–∞—è —Å—É–º–º–∞", amount=total)],
        start_parameter="test"
    )

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞)
@dp.message_handler(commands=['add_product'], user_id=ADMIN_ID)
async def add_product_start(message: types.Message):
    await ProductState.name.set()
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(state=ProductState.name)
async def set_product_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await ProductState.next()
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(state=ProductState.description)
async def set_product_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    await ProductState.next()
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä—É–±–ª—è—Ö):")

@dp.message_handler(state=ProductState.price)
async def set_product_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = int(message.text)
    await ProductState.next()
    await message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(content_types=['photo'], state=ProductState.photo)
async def set_product_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[-1].file_id
        db.add_product(data['name'], data['description'], data['price'], data['photo'])
    
    await state.finish()
    await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)

